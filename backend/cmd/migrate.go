package main

import (
	"log"
	"os"
	"strconv"

	"mvp-go-backend/config"
	"mvp-go-backend/database"

	"github.com/golang-migrate/migrate/v4"
	"github.com/golang-migrate/migrate/v4/database/postgres"
	_ "github.com/golang-migrate/migrate/v4/source/file"
	_ "github.com/lib/pq"
)

func main() {
	// –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –∏–∑ .env
	config.LoadConfig()

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	database.InitDB()

	// –ü–æ–ª—É—á–∏—Ç—å *sql.DB –∏–∑ GORM
	gormDB := database.GetDB()
	sqlDB, err := gormDB.DB()
	if err != nil {
		log.Fatalf("‚ùå Failed to extract *sql.DB from GORM: %v", err)
	}
	defer sqlDB.Close()

	// –°–æ–∑–¥–∞–Ω–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
	driver, err := postgres.WithInstance(sqlDB, &postgres.Config{})
	if err != nil {
		log.Fatalf("‚ùå Could not create migration driver: %v", err)
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ç–æ—Ä–∞
	m, err := migrate.NewWithDatabaseInstance(
		"file://migrations", // –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –º–∏–≥—Ä–∞—Ü–∏—è–º–∏
		"postgres", driver,
	)
	if err != nil {
		log.Fatalf("‚ùå Failed to create migrate instance: %v", err)
	}

	// –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
	command := "up"
	if len(os.Args) > 1 {
		command = os.Args[1]
	}

	// –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
	switch command {
	case "up":
		err = m.Up()
	case "down":
		err = m.Down()
	case "drop":
		err = m.Drop()
	case "version":
		version, dirty, err := m.Version()
		if err != nil {
			log.Fatalf("‚ùå Could not get version: %v", err)
		}
		log.Printf("üì¶ Migration version: %d, Dirty: %t", version, dirty)
		return
	case "force":
		if len(os.Args) < 3 {
			log.Fatal("Usage: go run cmd/migrate.go force <version>")
		}
		versionStr := os.Args[2]
		version, err := strconv.Atoi(versionStr)
		if err != nil {
			log.Fatalf("Invalid version number: %v", err)
		}
		err = m.Force(version)
		if err != nil {
			log.Fatalf("‚ùå Could not force version: %v", err)
		}
		log.Printf("‚öôÔ∏è Forced version to %d", version)
		return
	default:
		log.Fatalf("Unsupported command: %s. Available commands: up, down, drop, version, force", command)
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	if err != nil && err != migrate.ErrNoChange {
		log.Fatalf("‚ùå Migration %s failed: %v", command, err)
	}

	log.Printf("‚úÖ Migration '%s' completed successfully", command)
}
