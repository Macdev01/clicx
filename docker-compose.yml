services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: clixxx_postgres
    env_file:
      - ./postgres/.env
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d/
    networks:
      - clixxx_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U clixxx_user -d clixxx_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: clixxx_backend
    env_file:
      - ./backend/.env
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - clixxx_network
    volumes:
      - ./backend/clixxx-dev-44e45f09d47f.json:/root/clixxx-dev-44e45f09d47f.json:ro
    restart: unless-stopped

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: clixxx_frontend
    env_file:
      - ./frontend/.env
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - clixxx_network
    restart: unless-stopped

  # Admin Service
  admin:
    build:
      context: ./admin
      dockerfile: Dockerfile
    container_name: clixxx_admin
    env_file:
      - ./admin/.env
    ports:
      - "3001:3000"
    depends_on:
      - backend
    networks:
      - clixxx_network
    restart: unless-stopped

# Networks
networks:
  clixxx_network:
    driver: bridge

# Volumes
volumes:
  postgres_data:
    driver: local 